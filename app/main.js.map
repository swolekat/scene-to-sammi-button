{"version":3,"file":"main.js","mappings":"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","sources":["webpack://scene-to-sammi-button/webpack/bootstrap","webpack://scene-to-sammi-button/webpack/runtime/compat get default export","webpack://scene-to-sammi-button/webpack/runtime/define property getters","webpack://scene-to-sammi-button/webpack/runtime/hasOwnProperty shorthand","webpack://scene-to-sammi-button/external node-commonjs \"path\"","webpack://scene-to-sammi-button/external commonjs \"electron\"","webpack://scene-to-sammi-button/./src/menu/app_menu_template.js","webpack://scene-to-sammi-button/external node-commonjs \"fs\"","webpack://scene-to-sammi-button/external commonjs \"fs-jetpack\"","webpack://scene-to-sammi-button/./src/helpers/window.js","webpack://scene-to-sammi-button/external node-commonjs \"url\"","webpack://scene-to-sammi-button/./src/main-window.js","webpack://scene-to-sammi-button/./src/main.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { app } from \"electron\";\r\n\r\nexport default {\r\n  label: \"App\",\r\n  submenu: [\r\n    {\r\n      label: \"Quit\",\r\n      accelerator: \"CmdOrCtrl+Q\",\r\n      click: () => {\r\n        app.quit();\r\n      }\r\n    }\r\n  ]\r\n};\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs-jetpack\");","// This helper remembers the size and position of your windows, and restores\r\n// them in that place after app relaunch.\r\n// Can be used for more than one window, just construct many\r\n// instances of it and give each different name.\r\n\r\nimport { app, BrowserWindow, screen } from \"electron\";\r\nimport jetpack from \"fs-jetpack\";\r\n\r\nexport default (name, options) => {\r\n  const userDataDir = jetpack.cwd(app.getPath(\"userData\"));\r\n  const stateStoreFile = `window-state-${name}.json`;\r\n  const defaultSize = {\r\n    width: options.width,\r\n    height: options.height\r\n  };\r\n  let state = {};\r\n  let win;\r\n\r\n  const restore = () => {\r\n    let restoredState = {};\r\n    try {\r\n      restoredState = userDataDir.read(stateStoreFile, \"json\");\r\n    } catch (err) {\r\n      // For some reason json can't be read (might be corrupted).\r\n      // No worries, we have defaults.\r\n    }\r\n    return Object.assign({}, defaultSize, restoredState);\r\n  };\r\n\r\n  const getCurrentPosition = () => {\r\n    const position = win.getPosition();\r\n    const size = win.getSize();\r\n    return {\r\n      x: position[0],\r\n      y: position[1],\r\n      width: size[0],\r\n      height: size[1]\r\n    };\r\n  };\r\n\r\n  const windowWithinBounds = (windowState, bounds) => {\r\n    return (\r\n      windowState.x >= bounds.x &&\r\n      windowState.y >= bounds.y &&\r\n      windowState.x + windowState.width <= bounds.x + bounds.width &&\r\n      windowState.y + windowState.height <= bounds.y + bounds.height\r\n    );\r\n  };\r\n\r\n  const resetToDefaults = () => {\r\n    const bounds = screen.getPrimaryDisplay().bounds;\r\n    return Object.assign({}, defaultSize, {\r\n      x: (bounds.width - defaultSize.width) / 2,\r\n      y: (bounds.height - defaultSize.height) / 2\r\n    });\r\n  };\r\n\r\n  const ensureVisibleOnSomeDisplay = windowState => {\r\n    const visible = screen.getAllDisplays().some(display => {\r\n      return windowWithinBounds(windowState, display.bounds);\r\n    });\r\n    if (!visible) {\r\n      // Window is partially or fully not visible now.\r\n      // Reset it to safe defaults.\r\n      return resetToDefaults();\r\n    }\r\n    return windowState;\r\n  };\r\n\r\n  const saveState = () => {\r\n    if (!win.isMinimized() && !win.isMaximized()) {\r\n      Object.assign(state, getCurrentPosition());\r\n    }\r\n    userDataDir.write(stateStoreFile, state, { atomic: true });\r\n  };\r\n\r\n  state = ensureVisibleOnSomeDisplay(restore());\r\n\r\n  win = new BrowserWindow(Object.assign({}, options, state));\r\n\r\n  win.on(\"close\", saveState);\r\n\r\n  return win;\r\n};\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"url\");","import createWindow from \"./helpers/window\";\r\nimport url from \"url\";\r\nimport path from \"path\";\r\nimport env from \"env\";\r\n\r\nlet mainWindow;\r\n\r\nexport const init = () => {\r\n    mainWindow = createWindow(\"main\", {\r\n        width: 1000,\r\n        height: 600,\r\n        webPreferences: {\r\n            // Two properties below are here for demo purposes, and are\r\n            // security hazard. Make sure you know what you're doing\r\n            // in your production app.\r\n            nodeIntegration: true,\r\n            contextIsolation: false,\r\n            // Spectron needs access to remote module\r\n            enableRemoteModule: env.name === \"test\",\r\n            backgroundThrottling: false,\r\n        }\r\n    });\r\n\r\n    mainWindow.loadURL(\r\n        url.format({\r\n            pathname: path.join(__dirname, \"app.html\"),\r\n            protocol: \"file:\",\r\n            slashes: true\r\n        })\r\n    );\r\n\r\n    if (env.name === \"development\") {\r\n        mainWindow.openDevTools();\r\n    }\r\n};\r\n\r\nexport const refresh = () => {\r\n    mainWindow.webContents.send('re-render');\r\n};","// This is main process of Electron, started as first thing when your\r\n// app starts. It runs through entire life of your application.\r\n// It doesn't have any windows which you can see on screen, but we can open\r\n// window from here.\r\n\r\nimport path from \"path\";\r\nimport {app, Menu, ipcMain} from \"electron\";\r\nimport appMenuTemplate from \"./menu/app_menu_template\";\r\nimport devMenuTemplate from \"./menu/dev_menu_template\";\r\nimport fs from \"fs\";\r\nimport {init} from './main-window';\r\n\r\n// Special module holding environment variables which you declared\r\n// in config/env_xxx.json file.\r\nimport env from \"env\";\r\n\r\nconst PATH_TO_OBS_SCENES = path.join(process.env.APPDATA, '../Roaming/obs-studio/basic/scenes/');\r\n\r\n// Save userData in separate folders for each environment.\r\n// Thanks to this you can use production and development versions of the app\r\n// on same machine like those are two separate apps.\r\nif (env.name !== \"production\") {\r\n    const userDataPath = app.getPath(\"userData\");\r\n    app.setPath(\"userData\", `${userDataPath} (${env.name})`);\r\n}\r\n\r\nconst setApplicationMenu = () => {\r\n    const menus = [appMenuTemplate];\r\n    if (env.name !== \"production\") {\r\n        menus.push(devMenuTemplate);\r\n    }\r\n    Menu.setApplicationMenu(Menu.buildFromTemplate(menus));\r\n};\r\n\r\n// We can communicate with our window (the renderer process) via messages.\r\nconst initIpc = () => {\r\n    ipcMain.on(\"need-obs-data\", (event, arg) => {\r\n        const sceneCollections = fs.readdirSync(PATH_TO_OBS_SCENES)\r\n            .filter(f => !f.includes('.bak'));\r\n        const sceneCollectionData = sceneCollections.reduce((sum, sceneCollectionFileName) => {\r\n            const contents = JSON.parse(`${fs.readFileSync(path.join(PATH_TO_OBS_SCENES, sceneCollectionFileName))}`);\r\n            return [\r\n                ...sum,\r\n                {\r\n                    name: sceneCollectionFileName.replace('.json', ''),\r\n                    contents: contents,\r\n                }\r\n            ]\r\n        }, []);\r\n        event.reply(\"obs-data\", {\r\n            sceneCollectionData,\r\n        });\r\n    });\r\n};\r\n\r\n\r\napp.on(\"ready\", () => {\r\n    setApplicationMenu();\r\n    initIpc();\r\n    init();\r\n});\r\n\r\napp.on(\"window-all-closed\", () => {\r\n    app.quit();\r\n});\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","require","label","submenu","accelerator","click","app","quit","mainWindow","PATH_TO_OBS_SCENES","path","process","env","APPDATA","on","setApplicationMenu","menus","appMenuTemplate","Menu","buildFromTemplate","ipcMain","event","arg","sceneCollectionData","fs","filter","f","includes","reduce","sum","sceneCollectionFileName","contents","JSON","parse","name","replace","reply","options","userDataDir","jetpack","getPath","stateStoreFile","defaultSize","width","height","win","state","windowState","visible","screen","getAllDisplays","some","display","windowWithinBounds","bounds","x","y","resetToDefaults","getPrimaryDisplay","assign","ensureVisibleOnSomeDisplay","restore","restoredState","read","err","BrowserWindow","saveState","isMinimized","isMaximized","getCurrentPosition","position","getPosition","size","getSize","write","atomic","createWindow","webPreferences","nodeIntegration","contextIsolation","enableRemoteModule","backgroundThrottling","loadURL","url","pathname","__dirname","protocol","slashes"],"sourceRoot":""}